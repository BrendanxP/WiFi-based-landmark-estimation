#################
# General Notes #
#################

### python
 - start each file with (any character wrong is problems):
#!/usr/bin/env python3


### ROS 

rospack = ros + pack examples:
 - rospy
 - roscpp
 - rostime

roscd for changing directory
 - roscd log -> get to where ros stores log files
ls for a list of folders in current directory
cd goes back to root folder
cd .. goes back 1 layer
cd ./folder_name goes inside folder_name
cd folder also goes inside folder_name

in the catkin package , whenever a new package is placed in src folder
use this command to build the package again:
each package contains a function -> steering the wheels, doing some measurements etc.
catkin_make

package names:
<robot_name>_<function_of_package> 
 - nexus_controller
 - nexus_driver

roscore runs the core ros, this is always needed

code . runs VS code in the current directory
touch file_name.py creates a python file in current directory
to make the code executable use
chmod +x file_name.py 
rosnode list gives all nodes active, as long as roscore runs /rosout exists
/node_name will be the names from other active nodes
rostopic list gives all active topics
rostopic info /topic_name gives info on publishers and subscribers
example: 1 publisher and 1 subscriber means data is send from a to b
rosmsg show std_type (can be found from info) gives the type of data: int, float, string 
rostopic echo /topic_name gives what the topic has as data
rostopic hz topic_name gives frequency in hertz

to stop a node or the roscore terminal:
 - ctrl + C in terminal the node is running in
 - rosnode kill /node_name in root terminal

creating the node in a different terminal kills the already running node
so it is not possible to have 2 of the same nodes with the same name

to run the file use either one of the following when in the file directory
 - python3 file_name.py
 - ./file_name.py
 easier is to run from a root place terminal (not from specific file_name.py directory)
 - rosrun name_of_package file_name.py
 example: rosrun my_robot_controller my_first_node.py

the package.xml file states 
- which dependencies a package has 
- some info on the author and version

rosservice is a running service you can call, use for:
 - computation of data based on inputs (function with inputs and outputs)
 - change a setting

rosservice list
rosservice info
rossrv (ros service types)
rossrv show /folder_name/service_name gives inputs and outputs of that service

rqt_graph gives an overview of active nodes
rqt_tf_tree gives an overview of transforms

when directly in contact with topic: publishing and subscribing
when not directly (transforms): broadcasting and listening

URDF = unified robot descriptin format
URDF is a file type to state all reference frames transformations
URDF consists of:
 - visual: 1)geometry: shape, 2) origin: position, 3)material: color
 - collision: 1) geometry: shape, 2) origin: position
 - inertial: 1) mass, 2) origin: point of mass (zwaartepunt), 3) inertia: rotational inertia matrix (mass effects rotation)
visually the robot may look different from the collision box used (CSGO hitbox)
the inertia matrix components (I_xx, I_xy, I_xz, etc. (3x3)) can be computed from standard inertia 
matrices found on the internet for specific shapes.
Macros can be created to make functions for computations.
Math can be done by ${...} (example: ${pi/2})
Materials or other properties (color) can be set and used with their given name.

URDF is a tree of Links connected by Joints
joint always has: 
1) name, 2) type: revolut/translation, 3) parent link, 4) child link, 5) origin: (x,y,z)
if it is non-fixed it also haroslaunch turtlebot3_gazebo turtlebot3_empty_world.launch 

s:
6) axis: which axis it moves along or around, 
7) limits: lower and upper (radians or meters), velocity (radians/s or m/s), effort (N or Nm, is max force or torque)

TF is a tree of Frames connected by Transforms

robot_state_publisher:
 - inputs: URDF file, /joint_states (state variables: position, velocity etc.)
 - outputs: /tf_static (static transformations), /tf (dynamic transformations), /robot_description (copy of URDF file)

/joint_states from:
 - real hardware (real world experiment)
 - simulation (simulator)
 - GUI (testing)

launch file solves the problem of giving the xacro file to the /robot_state_publisher from terminal



basic structure of a node 
----------------------------------------------
#!/usr/bin/env python3
import rospy

def main() -> None:
    rospy.init_node("node_name")
    
    hertz = 10 # number of times per second 
    rate = rospy.Rate(hertz)
    
    while not rospy.is_shutdown():
        rospy.loginfo("Hello")
        rate.sleep()

if __name__ == '__main__':
    try:
        main()
    except rospy.ROSInterruptException as e:
        rospy.logwarn(e)
----------------------------------------------


"csi_fn":"/WSR_Project/WSR-Toolbox-cpp/data/3D_1_RX_2_TX_formation_2/3D_csi_rx_tx/csi_tx0_2021-03-03_192000.dat"
